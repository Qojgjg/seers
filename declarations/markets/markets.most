type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Leaf<K, V> = {keyvals : AssocList/1<Key<K>, V>; size : Nat};
type Market/1 =
  {
    author : Author;
    var blockTimestampLast : Time;
    description : Description;
    endDate : Time;
    id : MarketId;
    var imageUrl : Url;
    var kLast : Balance;
    var liquidity : Balance;
    var noProb : Probability;
    var providers : [Text];
    var reserveNo : Balance;
    var reserveYes : Balance;
    startDate : Time;
    var state : MarketState;
    title : Title;
    var totalShares : Shares;
    var volume : Balance;
    var yesProb : Probability
  };
type MarketId = Nat32;
type User =
  {var id : UserId; var markets : [UserMarket]; var seerBalance : Balance};
type UserId = Text;
actor {
  stable var anon : Text;
  stable var markets :
    {
      #branch : Branch<MarketId, Market/1>;
      #empty;
      #leaf : Leaf<MarketId, Market/1>
    };
  stable var nextMarketId : Nat32;
  stable var users :
    {#branch : Branch<UserId, User>; #empty; #leaf : Leaf<UserId, User>}
};
