// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type CollateralType = {#cycles; #icp; #seers};
type CommentStable =
  {
    author : Text;
    content : Text;
    createdAt : Time;
    id : Nat32;
    likes : [Like];
    modifiedAt : Time
  };
type Followee = {createdAt : Time; user : Text};
type Follower = {createdAt : Time; user : Text};
type Hash = Nat32;
type HistPoint =
  {createdAt : Time; liquidity : Float; probabilities : [Float]};
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type Like = {author : Text; createdAt : Time; stars : Nat32};
type List<T> = ?(T, List<T>);
type MarketCategory =
  {
    #business;
    #crypto;
    #dfinity;
    #entertainment;
    #financial;
    #politics;
    #science;
    #seers;
    #sports
  };
type MarketStable =
  {
    author : Text;
    bettors : [Text];
    category : MarketCategory;
    collateralType : CollateralType;
    comments : [CommentStable];
    createdAt : Time;
    description : Text;
    endDate : Time;
    histPrices : [HistPoint];
    id : Nat32;
    imageUrl : Text;
    images : [Text];
    k : Float;
    labels : [Text];
    liquidity : Float;
    modifiedAt : Time;
    probabilities : [Float];
    providers : [Text];
    reserves : [Float];
    startDate : Time;
    state : MarketState;
    title : Text;
    totalShares : Float;
    volume : Float
  };
type MarketState =
  {#approved; #closed; #invalid; #open; #pending; #resolved : Nat};
type Post =
  {
    author : Text;
    comments : [CommentStable];
    content : Text;
    createdAt : Time;
    id : Nat32;
    likes : [Like]
  };
type Time = Int;
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
type UserStable =
  {
    bio : Text;
    comments : [CommentStable];
    createdAt : Time;
    discord : Text;
    followees : [Followee];
    followers : [Follower];
    handle : Text;
    id : Text;
    lastSeenAt : Time;
    modifiedAt : Time;
    picture : Text;
    posts : [Post];
    twitter : Text;
    txs : [UserTx]
  };
type UserTx =
  {
    createdAt : Time;
    dest : ?Nat;
    fee : Float;
    id : Nat32;
    marketId : Nat32;
    price : Float;
    recv : Float;
    sent : Float;
    src : ?Nat
  };
actor {
  stable var anon : Text;
  stable var handles :
    {#branch : Branch<Text, Text>; #empty; #leaf : Leaf<Text, Text>};
  stable var nextMarketId : Nat32;
  stable var stableMarkets : [(Nat32, MarketStable)];
  stable var stableUsers : [(Text, UserStable)];
  stable var updating : Bool
};
