// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Author = Text;
type Balance = Float;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Comment = {author : Text; content : Text};
type Description = Text;
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type MarketId = Nat32;
type MarketResult =
  {
    author : Author;
    blockTimestampLast : Time;
    comments : [Comment];
    description : Description;
    endDate : Time;
    id : MarketId;
    imageUrl : Url;
    images : [Text];
    k : Balance;
    labels : [Text];
    liquidity : Balance;
    probabilities : [Probability];
    providers : [Text];
    reserves : [Balance];
    startDate : Time;
    state : MarketState;
    title : Title;
    totalShares : Shares;
    volume : Balance
  };
type MarketState = {#closed; #open; #pending; #resolved : Nat};
type Probability = Float;
type Shares = Int;
type Time = Int;
type Title = Text;
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
type Url = Text;
type UserId = Text;
type UserMarket =
  {
    balances : [Balance];
    marketId : MarketId;
    marketTitle : Title;
    shares : Shares
  };
type UserResult2 =
  {
    expSeerBalance : Balance;
    handle : Text;
    id : UserId;
    markets : [UserMarket];
    seerBalance : Balance;
    transactions : [UserTx]
  };
type UserTx =
  {
    dest : Nat;
    fee : Balance;
    marketId : MarketId;
    seerRecv : Balance;
    seerSent : Balance;
    src : Nat;
    timestamp : Time
  };
actor {
  stable var backupState :
    ([(UserId, UserResult2)], [(MarketId, MarketResult)]);
  stable var handles :
    {#branch : Branch<Text, UserId>; #empty; #leaf : Leaf<Text, UserId>};
  stable var nextMarketId : Nat32;
  stable var stableMarkets : [(MarketId, MarketResult)];
  stable var stableUsers : [(UserId, UserResult2)];
  stable var state : ([(UserId, UserResult2)], [(MarketId, MarketResult)])
};
