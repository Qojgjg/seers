type UserTx = 
 record {
   createdAt: Time;
   dest: opt nat;
   fee: float64;
   id: nat32;
   marketId: nat32;
   price: float64;
   recv: float64;
   sent: float64;
   src: opt nat;
 };
type UserStable = 
 record {
   balances: Balances;
   bio: text;
   comments: vec Comment;
   createdAt: Time;
   depositAddrs: DepositAddrs;
   discord: text;
   expBalances: ExpBalances;
   feed: vec FeedItem;
   followees: vec Followee;
   followers: vec Follower;
   handle: text;
   id: text;
   lastSeenAt: Time;
   markets: vec UserMarket;
   modifiedAt: Time;
   picture: text;
   posts: vec Post__1;
   twitter: text;
   txs: vec UserTx;
 };
type UserMarket = 
 record {
   balances: vec float64;
   brierScores: vec BrierScore;
   createdAt: Time;
   labels: vec text;
   marketId: nat32;
   modifiedAt: Time;
   redeemed: bool;
   shares: float64;
   spent: float64;
   title: text;
 };
type UserError = 
 variant {
   callerIsAnon;
   commentIsEmpty;
   descriptionMissing;
   endDateOld;
   endDateOlderThanStartDate;
   imageMissing;
   marketMissing;
   marketNotOpen;
   minimalAmountIsOne;
   newtonFailed;
   notEnoughBalance;
   notEnoughLiquidity: float64;
   optionsMissing;
   profileNotCreated;
   startDateOld;
   titleMissing;
   userAlreadyExist;
 };
type UserData = 
 record {
   handle: text;
   picture: text;
   "principal": text;
 };
type Time = int;
type Result = 
 variant {
   err: UserError;
   ok: UserStable;
 };
type Post__1 = 
 record {
   author: UserData;
   comments: vec Comment;
   content: text;
   createdAt: Time;
   id: nat32;
   likes: vec Like;
 };
type Post = 
 record {
   author: UserData;
   comments: vec Comment__1;
   content: text;
   createdAt: Time;
   id: nat32;
   likes: vec Like__1;
 };
type MarketState = 
 variant {
   approved;
   closed;
   invalid;
   open;
   pending;
   resolved: nat;
 };
type MarketStable = 
 record {
   author: UserData;
   bettors: vec text;
   category: MarketCategory;
   collateralType: CollateralType;
   comments: vec Comment__1;
   createdAt: Time;
   description: text;
   endDate: Time;
   histPrices: vec HistPoint;
   id: nat32;
   imageUrl: text;
   images: vec text;
   k: float64;
   labels: vec text;
   liquidity: float64;
   modifiedAt: Time;
   probabilities: vec float64;
   providers: vec text;
   reserves: vec float64;
   startDate: Time;
   state: MarketState;
   title: text;
   totalShares: float64;
   volume: float64;
 };
type MarketCategory = 
 variant {
   business;
   crypto;
   dfinity;
   entertainment;
   financial;
   politics;
   science;
   seers;
   sports;
 };
type Market = 
 service {
   approveMarket: (nat32) -> ();
   callerAccount: () -> (AccountIdentifier);
   canisterAccount: () -> (text) query;
   canisterFloat: () -> (ICP);
   createUser: (text) -> (Result);
   getUserStable: (text) -> (opt UserStable) query;
   readAllUsers: () -> (vec UserStable) query;
   resolveMarket: (nat32, nat) -> (bool);
   setUpdating: (bool) -> () oneway;
 };
type Like__1 = 
 record {
   authorHandle: text;
   authorPicture: text;
   authorPrincipal: text;
   createdAt: Time;
   stars: nat32;
 };
type Like = 
 record {
   authorHandle: text;
   authorPicture: text;
   authorPrincipal: text;
   createdAt: Time;
   stars: nat32;
 };
type ICP = record {e8s: nat64;};
type HistPoint = 
 record {
   createdAt: Time;
   liquidity: float64;
   probabilities: vec float64;
 };
type Follower = 
 record {
   createdAt: Time;
   user: UserData;
 };
type Followee = 
 record {
   createdAt: Time;
   user: UserData;
 };
type FeedItem = 
 variant {
   bet: Bet;
   comment: Comment__1;
   market: MarketStable;
   post: Post;
 };
type ExpBalances = 
 record {
   expBtc: float64;
   expCycles: float64;
   expIcp: float64;
   expSeers: float64;
 };
type DepositAddrs = 
 record {
   btc: opt text;
   cycles: opt text;
   icp: opt text;
 };
type Comment__1 = 
 record {
   content: text;
   createdAt: Time;
   id: nat32;
   likes: vec Like__1;
   user: UserData;
 };
type Comment = 
 record {
   content: text;
   createdAt: Time;
   id: nat32;
   likes: vec Like;
   user: UserData;
 };
type CollateralType = 
 variant {
   cycles;
   icp;
   seers;
 };
type BrierScore = 
 record {
   createdAt: Time;
   score: float64;
 };
type Bet = 
 record {
   comment: Comment__1;
   tx: UserTx;
 };
type Balances = 
 record {
   btc: float64;
   cycles: float64;
   icp: float64;
   seers: float64;
 };
type AccountIdentifier = blob;
service : () -> Market
