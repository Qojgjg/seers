type UserResult = 
 record {
   id: UserId;
   markets: vec UserMarket;
   seerBalance: Balance;
 };
type UserMarket = 
 record {
   marketId: MarketId;
   marketTitle: Title;
   noBalance: Balance;
   shares: Shares;
   yesBalance: Balance;
 };
type UserId = text;
type Url = text;
type Title = text;
type Time = int;
type Shares = nat64;
type Probability = nat64;
type MarketState = 
 variant {
   closed;
   open;
   resolved;
 };
type MarketResult = 
 record {
   author: Author;
   blockTimestampLast: Time;
   description: Description;
   endDate: Time;
   id: MarketId;
   imageUrl: Url;
   kLast: Balance;
   liquidity: Balance;
   noProb: Probability;
   providers: vec text;
   reserveNo: Balance;
   reserveYes: Balance;
   startDate: Time;
   state: MarketState;
   title: Title;
   totalShares: Shares;
   yesProb: Probability;
 };
type MarketInitData = 
 record {
   description: Description;
   endDate: Time;
   imageUrl: Url;
   liquidity: Balance;
   noProb: Probability;
   title: Title;
   yesProb: Probability;
 };
type MarketId = nat32;
type Market = 
 service {
   addLiquidity: (MarketId, Balance) -> (bool);
   buyNo: (MarketId, Balance, bool) -> (opt Balance);
   buyYes: (MarketId, Balance, bool) -> (opt Balance);
   createMarket: (MarketInitData) -> (nat32);
   deleteAllMarkets: () -> ();
   deleteAllUsers: () -> ();
   deleteMarket: (MarketId) -> (bool);
   getUser: (UserId) -> (UserResult);
   readAllMarkets: () -> (vec MarketResult) query;
   readAllUsers: () -> (vec UserResult) query;
   readMarket: (MarketId) -> (opt MarketResult) query;
   removeLiquidity: (MarketId) -> (bool);
   sellNo: (MarketId, Balance, bool) -> (opt Balance);
   sellYes: (MarketId, Balance, bool) -> (opt Balance);
 };
type Description = text;
type Balance = nat64;
type Author = text;
service : () -> Market
