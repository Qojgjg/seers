type UserResult = 
 record {
   id: UserId;
   markets: vec UserMarket;
   seerBalance: Balance;
 };
type UserMarket = 
 record {
   balances: vec Balance;
   marketId: MarketId;
   marketTitle: Title;
   shares: Shares;
 };
type UserId = text;
type Url = text;
type Title = text;
type Time = int;
type Shares = int;
type Probability = float64;
type MarketState = 
 variant {
   closed;
   open;
   pending;
   resolved: nat;
 };
type MarketResult = 
 record {
   author: Author;
   blockTimestampLast: Time;
   description: Description;
   endDate: Time;
   id: MarketId;
   imageUrl: Url;
   images: vec text;
   k: Balance;
   labels: vec text;
   liquidity: Balance;
   probabilities: vec Probability;
   providers: vec text;
   reserves: vec Balance;
   startDate: Time;
   state: MarketState;
   title: Title;
   totalShares: Shares;
   volume: Balance;
 };
type MarketInitData = 
 record {
   description: Description;
   endDate: Time;
   imageUrl: Url;
   images: vec text;
   labels: vec text;
   liquidity: Balance;
   title: Title;
 };
type MarketId = nat32;
type Market = 
 service {
   approveMarket: (MarketId) -> ();
   buyOption: (MarketId, Balance, nat, bool) -> (opt Balance);
   claimTokens: (MarketId) -> (Balance);
   createMarket: (MarketInitData) -> (MarketId);
   createUserResult: () -> (UserResult);
   deleteAllMarkets: () -> ();
   deleteAllUsers: () -> ();
   deleteMarket: (MarketId) -> (bool);
   getUserResult: (UserId) -> (opt UserResult) query;
   readAllMarkets: () -> (vec MarketResult) query;
   readAllOpenMarkets: () -> (vec MarketResult) query;
   readAllUsers: () -> (vec UserResult) query;
   readMarket: (MarketId) -> (opt MarketResult) query;
   resolveMarket: (MarketId, nat) -> (bool);
   sellOption: (MarketId, Balance, nat, bool) -> (opt Balance);
 };
type Description = text;
type Balance = float64;
type Author = text;
service : () -> Market
