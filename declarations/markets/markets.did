type User = 
 record {
   id: text;
   liquidityProviderFor: vec record {
                               nat64;
                               nat64;
                             };
   marketTokens: vec record {
                       nat64;
                       nat64;
                       nat64;
                     };
   seerBalance: nat64;
 };
type Title = text;
type Time = int;
type Market__1 = 
 record {
   author: Author;
   blockTimestampLast: Time;
   description: Description;
   endDate: Time;
   id: nat32;
   kLast: nat64;
   liquidity: nat64;
   noProb: nat64;
   providers: vec text;
   reserveNo: nat64;
   reserveYes: nat64;
   startDate: Time;
   title: Title;
   totalShares: nat64;
   yesProb: nat64;
 };
type MarketInitData = 
 record {
   description: Description;
   endDate: Time;
   liquidity: nat64;
   noProb: nat64;
   title: Title;
   yesProb: nat64;
 };
type Market = 
 service {
   createMarket: (MarketInitData) -> (nat32);
   deleteAllMarkets: () -> ();
   deleteMarket: (nat32) -> (bool);
   getUser: () -> (opt User);
   readAllMarkets: () -> (vec Market__1) query;
   readMarket: (nat32) -> (opt Market__1) query;
   updateMarket: (nat32, Market__1) -> (bool);
 };
type Description = text;
type Author = text;
service : () -> Market
